#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pachong:server');
var http = require('http');
var request = require('request');

var cheerio = require('cheerio')

cheerio.prototype.removeTagText = function () {
  var html = this.html()
  return html.replace(/<([\w\d]+)\b[^<]+?<\/\1>/g, (m) => {
    return ''
  })
}
request('http://hz.58.com/chuzu/', (err, req) => {
  if (!err) {
    var body = req.body
    var $ = cheerio.load(body, {
      decodeEntities: false
    })
    $('.listUl li').each((i,item)=>{
     var desc = $('.room', item).text().trim().replace(/[ ]|[&nbsp;]/g, ''); ;
     var address = $('.add a', item).text().trim().replace(/[ ]|[&nbsp;]/g, '');
     var money = $('.money', item).text().trim().replace(/[ ]|[&nbsp;]/g, '');
     console.log('位置:'+address+'\n'+'房型:'+desc+'价格:'+money)
     
    })

    // $('.list.list_preferential').each((i, item) => {
    //   var $title = $('.itemName a', item)
    //   var url = $title.attr('href')
    //   var title = $title.removeTagText().trim()

    //   var hl = $title.children().text().trim()
    //   var img = $('img', item).attr('src')
    //   var desc = $('.lrInfo', item).html().trim()
    //   desc = desc.replace(/<a\b.+?>阅读全文<\/a>/g, '')
    //   var mall = $('.botPart a.mall', item).text().trim()

    //   console.log({title, hl, url, img, desc, mall})
    // })
  }
})
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
